version: "3.9"

services:
  # PostgreSQL - Primary operational database
  postgres:
    image: postgres:15-alpine
    container_name: kapsel-postgres
    ports:
      - "5432:5432"
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: kapsel_dev
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./migrations:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  # PostgreSQL for testing (separate instance)
  postgres-test:
    image: postgres:15-alpine
    container_name: kapsel-postgres-test
    ports:
      - "5433:5432"
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: kapsel_test
    tmpfs:
      - /var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  # TigerBeetle - Immutable audit log (uncomment when ready)
  # tigerbeetle:
  #   image: ghcr.io/tigerbeetle/tigerbeetle:latest
  #   container_name: kapsel-tigerbeetle
  #   ports:
  #     - "3000:3000"
  #   volumes:
  #     - tigerbeetle_data:/data
  #   command: ["start", "--addresses=0.0.0.0:3000", "/data/cluster"]
  #   restart: unless-stopped

  # Redis - For rate limiting and caching
  redis:
    image: redis:7-alpine
    container_name: kapsel-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  # Prometheus - Metrics collection
  prometheus:
    image: prom/prometheus:latest
    container_name: kapsel-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./ops/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - "--config.file=/etc/prometheus/prometheus.yml"
      - "--storage.tsdb.path=/prometheus"
      - "--web.console.libraries=/etc/prometheus/console_libraries"
      - "--web.console.templates=/etc/prometheus/consoles"
      - "--web.enable-lifecycle"
    restart: unless-stopped

  # Grafana - Metrics visualization
  grafana:
    image: grafana/grafana:latest
    container_name: kapsel-grafana
    ports:
      - "3001:3000"
    environment:
      GF_SECURITY_ADMIN_USER: admin
      GF_SECURITY_ADMIN_PASSWORD: admin
      GF_INSTALL_PLUGINS: grafana-piechart-panel
    volumes:
      - grafana_data:/var/lib/grafana
      - ./ops/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./ops/grafana/datasources:/etc/grafana/provisioning/datasources
    depends_on:
      - prometheus
    restart: unless-stopped

  # Jaeger - Distributed tracing
  jaeger:
    image: jaegertracing/all-in-one:latest
    container_name: kapsel-jaeger
    ports:
      - "16686:16686" # Jaeger UI
      - "4317:4317" # OTLP gRPC
      - "4318:4318" # OTLP HTTP
    environment:
      COLLECTOR_OTLP_ENABLED: true
    restart: unless-stopped

  # MinIO - S3-compatible storage for webhook payloads (optional)
  # minio:
  #   image: minio/minio:latest
  #   container_name: kapsel-minio
  #   ports:
  #     - "9000:9000"
  #     - "9001:9001"
  #   environment:
  #     MINIO_ROOT_USER: minioadmin
  #     MINIO_ROOT_PASSWORD: minioadmin
  #   volumes:
  #     - minio_data:/data
  #   command: server /data --console-address ":9001"
  #   healthcheck:
  #     test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
  #     interval: 30s
  #     timeout: 20s
  #     retries: 3
  #   restart: unless-stopped

  # Adminer - Database UI (development only)
  adminer:
    image: adminer:latest
    container_name: kapsel-adminer
    ports:
      - "8081:8080"
    environment:
      ADMINER_DEFAULT_SERVER: postgres
    depends_on:
      - postgres
    restart: unless-stopped
    profiles:
      - dev

  # Mailhog - Email testing (for notifications)
  mailhog:
    image: mailhog/mailhog:latest
    container_name: kapsel-mailhog
    ports:
      - "1025:1025" # SMTP
      - "8025:8025" # Web UI
    restart: unless-stopped
    profiles:
      - dev

volumes:
  postgres_data:
  tigerbeetle_data:
  redis_data:
  prometheus_data:
  grafana_data:
  minio_data:

networks:
  default:
    name: kapsel-network
    driver: bridge
